/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Candidate,
  CandidateDto,
} from '../models';
import {
    CandidateFromJSON,
    CandidateToJSON,
    CandidateDtoFromJSON,
    CandidateDtoToJSON,
} from '../models';

export interface AddProductRequest {
    candidate: Candidate;
}

export interface DeleteCandidateRequest {
    id: string;
}

export interface GetCandidateRequest {
    id: string;
}

export interface UpdateCandidateRequest {
    id: string;
    candidate: Candidate;
}

/**
 * CandidateControllerApi - interface
 * 
 * @export
 * @interface CandidateControllerApiInterface
 */
export interface CandidateControllerApiInterface {
    /**
     * 
     * @summary Add new Candidate
     * @param {Candidate} candidate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApiInterface
     */
    addProductRaw(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Candidate>>;

    /**
     * Add new Candidate
     */
    addProduct(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Candidate>;

    /**
     * 
     * @summary Delete candidate by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApiInterface
     */
    deleteCandidateRaw(requestParameters: DeleteCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Delete candidate by id
     */
    deleteCandidate(requestParameters: DeleteCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Get all canidates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApiInterface
     */
    getAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CandidateDto>>>;

    /**
     * Get all canidates
     */
    getAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CandidateDto>>;

    /**
     * 
     * @summary Get participants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApiInterface
     */
    getAllParticipantsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CandidateDto>>>;

    /**
     * Get participants
     */
    getAllParticipants(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CandidateDto>>;

    /**
     * 
     * @summary Get candidate by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApiInterface
     */
    getCandidateRaw(requestParameters: GetCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Candidate>>;

    /**
     * Get candidate by id
     */
    getCandidate(requestParameters: GetCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Candidate>;

    /**
     * 
     * @summary Get candidate count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApiInterface
     */
    getCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>>;

    /**
     * Get candidate count
     */
    getCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number>;

    /**
     * 
     * @summary Update existing Candidate
     * @param {string} id 
     * @param {Candidate} candidate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApiInterface
     */
    updateCandidateRaw(requestParameters: UpdateCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Candidate>>;

    /**
     * Update existing Candidate
     */
    updateCandidate(requestParameters: UpdateCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Candidate>;

}

/**
 * 
 */
export class CandidateControllerApi extends runtime.BaseAPI implements CandidateControllerApiInterface {

    /**
     * Add new Candidate
     */
    async addProductRaw(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Candidate>> {
        if (requestParameters.candidate === null || requestParameters.candidate === undefined) {
            throw new runtime.RequiredError('candidate','Required parameter requestParameters.candidate was null or undefined when calling addProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/candidate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CandidateToJSON(requestParameters.candidate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CandidateFromJSON(jsonValue));
    }

    /**
     * Add new Candidate
     */
    async addProduct(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Candidate> {
        const response = await this.addProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete candidate by id
     */
    async deleteCandidateRaw(requestParameters: DeleteCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCandidate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/candidate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete candidate by id
     */
    async deleteCandidate(requestParameters: DeleteCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteCandidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all canidates
     */
    async getAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CandidateDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/candidates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CandidateDtoFromJSON));
    }

    /**
     * Get all canidates
     */
    async getAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CandidateDto>> {
        const response = await this.getAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get participants
     */
    async getAllParticipantsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CandidateDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/participants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CandidateDtoFromJSON));
    }

    /**
     * Get participants
     */
    async getAllParticipants(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CandidateDto>> {
        const response = await this.getAllParticipantsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get candidate by id
     */
    async getCandidateRaw(requestParameters: GetCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Candidate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCandidate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/candidate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CandidateFromJSON(jsonValue));
    }

    /**
     * Get candidate by id
     */
    async getCandidate(requestParameters: GetCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Candidate> {
        const response = await this.getCandidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get candidate count
     */
    async getCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/candidates/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get candidate count
     */
    async getCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getCountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update existing Candidate
     */
    async updateCandidateRaw(requestParameters: UpdateCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Candidate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCandidate.');
        }

        if (requestParameters.candidate === null || requestParameters.candidate === undefined) {
            throw new runtime.RequiredError('candidate','Required parameter requestParameters.candidate was null or undefined when calling updateCandidate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/candidate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CandidateToJSON(requestParameters.candidate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CandidateFromJSON(jsonValue));
    }

    /**
     * Update existing Candidate
     */
    async updateCandidate(requestParameters: UpdateCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Candidate> {
        const response = await this.updateCandidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
