/* tslint:disable */
/* eslint-disable */
/**
 * CCubAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Tenant,
  User,
  Userlogin,
} from '../models';
import {
    TenantFromJSON,
    TenantToJSON,
    UserFromJSON,
    UserToJSON,
    UserloginFromJSON,
    UserloginToJSON,
} from '../models';

export interface ApiUserAdduserPostRequest {
    user?: User;
}

export interface ApiUserGetAlluserByTenantidPostRequest {
    requestBody?: Array<number>;
}

export interface ApiUserGetByUsernameGetRequest {
    userName?: string;
}

export interface ApiUserLoginPostRequest {
    userlogin?: Userlogin;
}

export interface ApiUserUserGetRequest {
    userid?: number;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserAdduserPostRaw(requestParameters: ApiUserAdduserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiUserAdduserPost(requestParameters: ApiUserAdduserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserGetAlluserByTenantidPostRaw(requestParameters: ApiUserGetAlluserByTenantidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiUserGetAlluserByTenantidPost(requestParameters: ApiUserGetAlluserByTenantidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} [userName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserGetByUsernameGetRaw(requestParameters: ApiUserGetByUsernameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     */
    apiUserGetByUsernameGet(requestParameters: ApiUserGetByUsernameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * 
     * @param {Userlogin} [userlogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserLoginPostRaw(requestParameters: ApiUserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiUserLoginPost(requestParameters: ApiUserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {number} [userid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    apiUserUserGetRaw(requestParameters: ApiUserUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>>;

    /**
     */
    apiUserUserGet(requestParameters: ApiUserUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     */
    async apiUserAdduserPostRaw(requestParameters: ApiUserAdduserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/adduser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserAdduserPost(requestParameters: ApiUserAdduserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserAdduserPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserGetAlluserByTenantidPostRaw(requestParameters: ApiUserGetAlluserByTenantidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/get_alluser_by_tenantid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserGetAlluserByTenantidPost(requestParameters: ApiUserGetAlluserByTenantidPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserGetAlluserByTenantidPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserGetByUsernameGetRaw(requestParameters: ApiUserGetByUsernameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/User/get_by_username`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async apiUserGetByUsernameGet(requestParameters: ApiUserGetByUsernameGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiUserGetByUsernameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUserLoginPostRaw(requestParameters: ApiUserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/User/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserloginToJSON(requestParameters.userlogin),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserLoginPost(requestParameters: ApiUserLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiUserUserGetRaw(requestParameters: ApiUserUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tenant>> {
        const queryParameters: any = {};

        if (requestParameters.userid !== undefined) {
            queryParameters['userid'] = requestParameters.userid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/User/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
    }

    /**
     */
    async apiUserUserGet(requestParameters: ApiUserUserGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tenant> {
        const response = await this.apiUserUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
