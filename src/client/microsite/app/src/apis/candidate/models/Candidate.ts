/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificationsAndLicense } from './CertificationsAndLicense';
import {
    CertificationsAndLicenseFromJSON,
    CertificationsAndLicenseFromJSONTyped,
    CertificationsAndLicenseToJSON,
} from './CertificationsAndLicense';
import type { Education } from './Education';
import {
    EducationFromJSON,
    EducationFromJSONTyped,
    EducationToJSON,
} from './Education';
import type { PersonalInformation } from './PersonalInformation';
import {
    PersonalInformationFromJSON,
    PersonalInformationFromJSONTyped,
    PersonalInformationToJSON,
} from './PersonalInformation';
import type { Reference } from './Reference';
import {
    ReferenceFromJSON,
    ReferenceFromJSONTyped,
    ReferenceToJSON,
} from './Reference';
import type { WorkExperience } from './WorkExperience';
import {
    WorkExperienceFromJSON,
    WorkExperienceFromJSONTyped,
    WorkExperienceToJSON,
} from './WorkExperience';

/**
 * 
 * @export
 * @interface Candidate
 */
export interface Candidate {
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    id?: string;
    /**
     * 
     * @type {PersonalInformation}
     * @memberof Candidate
     */
    personalInformation?: PersonalInformation;
    /**
     * 
     * @type {Array<WorkExperience>}
     * @memberof Candidate
     */
    workExperience?: Array<WorkExperience>;
    /**
     * 
     * @type {Array<Education>}
     * @memberof Candidate
     */
    education?: Array<Education>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Candidate
     */
    skills?: Array<string>;
    /**
     * 
     * @type {Array<CertificationsAndLicense>}
     * @memberof Candidate
     */
    certificationsAndLicenses?: Array<CertificationsAndLicense>;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof Candidate
     */
    references?: Array<Reference>;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    resumeOrCV?: string;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    resumePath?: string;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    currentCtc?: number;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    expectedCtc?: number;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    currentCompany?: string;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    noticePeriod?: number;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    techStack?: string;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    flag?: string;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    activeStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    preferences?: string;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    activeApps?: number;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    totalApps?: number;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    tenantId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Candidate
     */
    participant?: boolean;
}

/**
 * Check if a given object implements the Candidate interface.
 */
export function instanceOfCandidate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CandidateFromJSON(json: any): Candidate {
    return CandidateFromJSONTyped(json, false);
}

export function CandidateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Candidate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'personalInformation': !exists(json, 'personalInformation') ? undefined : PersonalInformationFromJSON(json['personalInformation']),
        'workExperience': !exists(json, 'workExperience') ? undefined : ((json['workExperience'] as Array<any>).map(WorkExperienceFromJSON)),
        'education': !exists(json, 'education') ? undefined : ((json['education'] as Array<any>).map(EducationFromJSON)),
        'skills': !exists(json, 'skills') ? undefined : json['skills'],
        'certificationsAndLicenses': !exists(json, 'certificationsAndLicenses') ? undefined : ((json['certificationsAndLicenses'] as Array<any>).map(CertificationsAndLicenseFromJSON)),
        'references': !exists(json, 'references') ? undefined : ((json['references'] as Array<any>).map(ReferenceFromJSON)),
        'resumeOrCV': !exists(json, 'resumeOrCV') ? undefined : json['resumeOrCV'],
        'resumePath': !exists(json, 'resumePath') ? undefined : json['resumePath'],
        'currentCtc': !exists(json, 'currentCtc') ? undefined : json['currentCtc'],
        'expectedCtc': !exists(json, 'expectedCtc') ? undefined : json['expectedCtc'],
        'currentCompany': !exists(json, 'currentCompany') ? undefined : json['currentCompany'],
        'noticePeriod': !exists(json, 'noticePeriod') ? undefined : json['noticePeriod'],
        'techStack': !exists(json, 'techStack') ? undefined : json['techStack'],
        'flag': !exists(json, 'flag') ? undefined : json['flag'],
        'activeStatus': !exists(json, 'activeStatus') ? undefined : json['activeStatus'],
        'preferences': !exists(json, 'preferences') ? undefined : json['preferences'],
        'activeApps': !exists(json, 'activeApps') ? undefined : json['activeApps'],
        'totalApps': !exists(json, 'totalApps') ? undefined : json['totalApps'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'participant': !exists(json, 'participant') ? undefined : json['participant'],
    };
}

export function CandidateToJSON(value?: Candidate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'personalInformation': PersonalInformationToJSON(value.personalInformation),
        'workExperience': value.workExperience === undefined ? undefined : ((value.workExperience as Array<any>).map(WorkExperienceToJSON)),
        'education': value.education === undefined ? undefined : ((value.education as Array<any>).map(EducationToJSON)),
        'skills': value.skills,
        'certificationsAndLicenses': value.certificationsAndLicenses === undefined ? undefined : ((value.certificationsAndLicenses as Array<any>).map(CertificationsAndLicenseToJSON)),
        'references': value.references === undefined ? undefined : ((value.references as Array<any>).map(ReferenceToJSON)),
        'resumeOrCV': value.resumeOrCV,
        'resumePath': value.resumePath,
        'currentCtc': value.currentCtc,
        'expectedCtc': value.expectedCtc,
        'currentCompany': value.currentCompany,
        'noticePeriod': value.noticePeriod,
        'techStack': value.techStack,
        'flag': value.flag,
        'activeStatus': value.activeStatus,
        'preferences': value.preferences,
        'activeApps': value.activeApps,
        'totalApps': value.totalApps,
        'tenantId': value.tenantId,
        'participant': value.participant,
    };
}

